generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model Token {
    id                                       Int                     @id @default(autoincrement())
    coingecko_slug                           String                  @unique
    cmc_slug                                 String?
    image                                    String?
    launched_date                            DateTime
    name                                     String
    symbol                                   String
    category                                 String
    description                              String
    price                                    String
    price_change_perc_1h                     Float?
    price_change_perc_24h                    Float?
    price_change_perc_7d                     Float?
    price_btc                                String
    price_eth                                String
    price_change_btc_perc_24h                Float
    price_change_eth_perc_24h                Float
    market_cap                               String?
    market_cap_rank                          Int?
    market_cap_change_perc_24h               Float?
    fully_diluted_market_cap                 String?
    fully_diluted_market_cap_change_perc_24h Float?
    self_reported_circulating_supply         String?
    circulating_supply                       String?
    total_supply                             String?
    volume                                   String?
    volume_change_perc_24h                   Float?
    TokenBlockchainRecords                   TokenBlockchainRecord[]
    last_updated                             DateTime                @updatedAt()

    @@index([coingecko_slug])
    @@index([symbol])
    @@index([market_cap_rank])
}

model Blockchain {
    id                        Int                     @id @default(autoincrement())
    coingecko_slug            String                  @unique
    name                      String
    image                     String?
    evm_chain_id              Int?
    explorer_tx_url_format    String?
    explorer_addr_url_format  String?
    explorer_token_url_format String?
    Tokens                    TokenBlockchainRecord[]
    Exchange                  Exchange[]

    @@index([coingecko_slug])
}

model TokenBlockchainRecord {
    address                   String
    token_id                  Int?
    blockchain_coingecko_slug String
    Token                     Token?         @relation(fields: [token_id], references: [id], onDelete: Cascade)
    Blockchain                Blockchain     @relation(fields: [blockchain_coingecko_slug], references: [coingecko_slug], onDelete: Cascade)
    BaseExchangePair          ExchangePair[] @relation(name: "base_token_blockchain_record")
    QuoteExchangePair         ExchangePair[] @relation(name: "quote_token_blockchain_record")

    @@id([blockchain_coingecko_slug, address])
    @@index([address])
}

model ExchangePair {
    pool_name                             String
    coingecko_pool_id                     String
    volume                                String
    price                                 String
    price_change_perc_24h                 Float
    sells_count                           Int
    buys_count                            Int
    trades_count                          Int
    unique_buyers_count                   Int
    unique_sellers_count                  Int
    reserve_in_usd                        String
    exchange_coingecko_slug               String
    BaseTokenBlockchainRecord             TokenBlockchainRecord @relation(name: "base_token_blockchain_record", fields: [base_token_blockchain_slug, base_token_blockchain_record_address], references: [blockchain_coingecko_slug, address], onDelete: Cascade)
    QuoteTokenBlockchainRecord            TokenBlockchainRecord @relation(name: "quote_token_blockchain_record", fields: [quote_token_blockchain_slug, quote_token_blockchain_record_address], references: [blockchain_coingecko_slug, address], onDelete: Cascade)
    Exchange                              Exchange              @relation(fields: [exchange_coingecko_slug], references: [coingecko_slug], onDelete: Cascade)
    base_token_blockchain_record_address  String
    quote_token_blockchain_record_address String
    base_token_blockchain_slug            String
    quote_token_blockchain_slug           String

    @@id([base_token_blockchain_record_address, base_token_blockchain_slug, quote_token_blockchain_record_address, quote_token_blockchain_slug, exchange_coingecko_slug])
    // @@index([base_token_coingecko_slug])
    // @@index([quote_token_coingecko_slug])
    @@index([exchange_coingecko_slug])
    @@index([reserve_in_usd])
}

enum ExchangeType {
    DEX
    CEX
}

model Exchange {
    id             Int            @id @default(autoincrement())
    name           String
    coingecko_slug String         @unique
    blockchain_id  Int
    Type           ExchangeType
    ExchangePair   ExchangePair[]
    Blockchain     Blockchain     @relation(fields: [blockchain_id], references: [id], onDelete: Cascade)

    @@index([coingecko_slug])
}
